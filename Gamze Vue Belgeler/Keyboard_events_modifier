HTML:

<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>

<div id="app">
  <button v-on:click="showAlert('gamze')"> Alert Göster!!</button>
  <button v-on:click="counter++">Arttır(methodsuz)</button>
  <button v-on:click="increaseCounter(3,$event)"> Arttır (fonksiyonlu) </button> <!-- $event i burada da tanımlamayı unutma -->
  <p> {{ counter }} </p>
  <p v-on:mousemove="updateCoordinates(4,$event)">Coordinates: {{ X }} , {{ Y }} <!-- event objesini parametre olarak aldık. -->
    <span v-on:mousemove.stop>Durdurulacak Bölme</span>


  </p>

  <input type="text" v-on:keyup.enter="showAlert2"> <!-- "keyup" mouse'a basılıp kaldırılınca çalışmasını sağlar kodun. "enter" da input içerisine bir şeyler yazıldıktan sonra enter'a basıldığında kodun harekete geçmesini alertin verilmesi yani fonksiyonun çaklışmasını sağlar. Bunlara ek olarak; event modifier işlemleri "." (nokta) kullanılarak yapılır. Enter yanında space gibi klavye tuşları kullanılabilir  ve event yine modifiye edilebilir. -->

</div>


JS:

new Vue({
  el: "#app",
  data: {
    counter: 0,
    X: 0,
    Y: 0
  },
  methods: {
    showAlert: function(name) {
      alert(name);
    },
    increaseCounter: function(step) {
      this.counter += step;
    },
    updateCoordinates: function(step, event) { //event default bir parametredir. Bu fonksiyon mause taşındıkça koordinatlardaki değişimi göstermektedir. Step anahtar kelimesini (parametresini) arttırma işlemi yapacağın her yerde kullanmayı ve tanımlamayı unutma!

      this.counter += step;

      this.X = event.clientX; //client koordinat için kullanılan js olanağıdır anahtar kelimesidir yani.
      this.Y = event.clientY;
    },
    showAlert2: function(event) {
      alert(event.target.value); //event tanımlı olan fonsiyonda inputun içerisindeki veriyi alabilmek için "value" kullanılır çünkü her input value barındırır. Yani inputa yazılan ifade alertte çıkar bu şekilde.
    }
  }
})

